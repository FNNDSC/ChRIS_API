#!/usr/bin/env python


"""

 _____ _    ______ _____ _____   _   _ _ _
/  __ \ |   | ___ \_   _/  ___| | | | | | |
| /  \/ |__ | |_/ / | | \ `--.  | | | | | |_ _ __ ___  _ __
| |   | '_ \|    /  | |  `--. \ | | | | | __| '__/ _ \| '_ \
| \__/\ | | | |\ \ _| |_/\__/ / | |_| | | |_| | | (_) | | | |
 \____/_| |_\_| \_|\___/\____/   \___/|_|\__|_|  \___/|_| |_|



font generated by:
http://patorjk.com/software/taag/#p=display&f=Doom&t=ChRIS%20Ultron

This module implements a simple comment-type class

"""

import  abc
import  json

import  os
import  sys

import  argparse
import  dataTree

import  C_snode

class data(object):
    """
    This class implements a ChRIS style data object container.
    The data container encapsulates three components:

        contents
            \
            +--- fileView
            \
            +--- visualView
            \
            +--- plugins
    """

    __metaclass__   = abc.ABCMeta

    def __init__(self, **kwargs):

        self.contents   = ""
        self.tree       = None


    def contents_build(self, **kwargs):
        """
        Populate the contents with default noise.
        :return:
        """

        SeriesFilesCount = 1
        for key,val in kwargs.iteritems():
            if key == 'SeriesFilesCount':       SeriesFilesCount = int(val)

        ft_dataView = dataTree.dataTree_PACSPull(SeriesFilesCount = SeriesFilesCount)
        ft_fileView = dataTree.dataTree_PACSPull(SeriesFilesCount = SeriesFilesCount)

        self.tree   = C_snode.C_stree()
        s           = self.tree

        s.mknode(['dataView', 'fileView', 'plugin'])
        s.cd('/dataView')
        s.graft(ft_dataView.FS)
        s.cd('/fileView')
        s.graft(ft_dataView.FS)

        s.cd('/plugin')
        s.mknode(['0', '1'])
        s.tree_metaData_print(False)


        self.contents = {'tree':    self.tree}

    def __iter__(self):
        yield('data', dict(self.tree.snode_root))

def synopsis(ab_shortOnly = False):
    scriptName = os.path.basename(sys.argv[0])
    shortSynopsis =  '''
    SYNOPSIS

            %s                                     \\
                            --fileCount <numberOfFiles>


    ''' % scriptName

    description =  '''
    DESCRIPTION

        `%s' is a simple "data" object container for ChRIS. It encapsulates
        an interactive visual viewer and a file finder/explorer component,
        as well as plugin component.

    ARGS

       --fileCount <fileCount>
       The number of simulated files to generate.


    ''' % (scriptName)
    if ab_shortOnly:
        return shortSynopsis
    else:
        return shortSynopsis + description

if __name__ == "__main__":

    parser      = argparse.ArgumentParser(description = synopsis(True))
    parser.add_argument(
        '-f', '--SeriesFilesCount',
        help    =   "The number of simulated DICOM filenames to generate.",
        dest    =   'SeriesFilesCount',
        action  =   'store',
        default =   10
    )

    args        = parser.parse_args()

    container   = data()
    container.contents_build(SeriesFilesCount = args.SeriesFilesCount)

    print(container.tree)
    print(json.dumps(dict(container)))

