#!/usr/bin/env python

# -*- coding: utf-8 -*-
"""

 _____ _    ______ _____ _____   _   _ _ _
/  __ \ |   | ___ \_   _/  ___| | | | | | |
| /  \/ |__ | |_/ / | | \ `--.  | | | | | |_ _ __ ___  _ __
| |   | '_ \|    /  | |  `--. \ | | | | | __| '__/ _ \| '_ \
| \__/\ | | | |\ \ _| |_/\__/ / | |_| | | |_| | | (_) | | | |
 \____/_| |_\_| \_|\___/\____/   \___/|_|\__|_|  \___/|_| |_|



font generated by:
http://patorjk.com/software/taag/#p=display&f=Doom&t=ChRIS%20Ultron

plugin

The plugin class encapsulates access to sub programs that provide
various functionalities to the system.

"""

from __future__ import print_function

import crun
import sys
import os
import argparse
import json

class Plugin(object):
    """The base Plugin class
    """

    def getList(self, *args, **kwargs):
        return {'pluginList' : self._l_plugin}

    def set(self, astr_pluginName):
        self.pluginName = astr_pluginName
        self.plugin     = eval('%s()' % self.pluginName)
        return {'success': True, 'pluginName': astr_pluginName, 'plugin': str(self.plugin), 'container': str(self)}

    def __init__(self):
        self._l_plugin  = []
        self.pluginName = ""
        self.plugin     = None

    def run(self, *args, **kwargs):
        d_info = {'container': str(self), 'plugin': str(self.plugin)}
        return {'info': d_info, 'run': self.plugin()}

    def status(self, *args, **kwargs):
        return self.plugin.status()

class Plugin_homePage(Plugin):
    """Plugins specific to the homePage view
    """

    def __init__(self):
        Plugin.__init__(self)
        self._l_plugin  = ['file_browser', 'pacs_pull']

class Plugin_dataView(Plugin):

    def __init__(self):
        Plugin.__init__(self)
        self._l_plugin  = ['mri_convert', 'recon_all', 'tractography']


class file_browser(object):

    def __init__(self):
        self._str_name              = 'file_browser'
        self.str_serverDirectory    = '/home/chris/data/3432545'

    def __call__(self, *args, **kwargs):
        return {'directory': self.str_serverDirectory}

    def status(self, *args, **kwargs):
        return {'status': "running"}


if __name__ == "__main__":
    p   = Plugin_homePage()
    print(p.getList())
    p.set('file_browser')
    print(p.run())