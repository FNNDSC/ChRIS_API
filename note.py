#!/usr/bin/env python


"""

 _____ _    ______ _____ _____   _   _ _ _
/  __ \ |   | ___ \_   _/  ___| | | | | | |
| /  \/ |__ | |_/ / | | \ `--.  | | | | | |_ _ __ ___  _ __
| |   | '_ \|    /  | |  `--. \ | | | | | __| '__/ _ \| '_ \
| \__/\ | | | |\ \ _| |_/\__/ / | |_| | | |_| | | (_) | | | |
 \____/_| |_\_| \_|\___/\____/   \___/|_|\__|_|  \___/|_| |_|



font generated by:
http://patorjk.com/software/taag/#p=display&f=Doom&t=ChRIS%20Ultron

This module implements a simple comment-type class

"""

import  abc
import  json

import  os
import  sys

import  argparse

sys.path.append('components/rikeripsum/rikeripsum')
sys.path.append('components/names')
import  rikeripsum


class note(object):
    """
    This class implements a ChRIS style note object.
    """

    __metaclass__   = abc.ABCMeta

    def __init__(self, **kwargs):

        self.contents   = ""

    def contents_rikeripsumBuild(self, **kwargs):
        """
        Populate the contents with default noise.
        :return:
        """

        paragraphs = 1
        for key,val in kwargs.iteritems():
            if key == 'paragraphs':  paragraphs = int(val)

        str_p   = ''

        for loop in range(0, paragraphs):
            str_p                   += rikeripsum.generate_paragraph()
            str_p                   += "\n"

        self.contents = {'body':    str_p}


    def __iter__(self):
        yield('note', self.contents)

def synopsis(ab_shortOnly = False):
    scriptName = os.path.basename(sys.argv[0])
    shortSynopsis =  '''
    SYNOPSIS

            %s                                     \\
                            --paragraphs <paragraphs>


    ''' % scriptName

    description =  '''
    DESCRIPTION

        `%s' is a simple "note" object handler for ChRIS.

    ARGS

       --paragraphs <paragraphs>
       The number of simulated paragraphs to generate.


    ''' % (scriptName)
    if ab_shortOnly:
        return shortSynopsis
    else:
        return shortSynopsis + description

if __name__ == "__main__":

    parser      = argparse.ArgumentParser(description = synopsis(True))
    parser.add_argument(
        '-p', '--paragraphs',
        help    =   "The number of paragraphs to generate.",
        dest    =   'paragraphs',
        action  =   'store',
        default =   3
    )

    args        = parser.parse_args()

    sample  = note()
    sample.contents_rikeripsumBuild(paragraphs=args.paragraphs)

    print(json.dumps(dict(sample)))

