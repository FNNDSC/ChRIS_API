#!/usr/bin/env python

# -*- coding: utf-8 -*-
"""

 _____ _    ______ _____ _____   _   _ _ _
/  __ \ |   | ___ \_   _/  ___| | | | | | |
| /  \/ |__ | |_/ / | | \ `--.  | | | | | |_ _ __ ___  _ __
| |   | '_ \|    /  | |  `--. \ | | | | | __| '__/ _ \| '_ \
| \__/\ | | | |\ \ _| |_/\__/ / | |_| | | |_| | | (_) | | | |
 \____/_| |_\_| \_|\___/\____/   \___/|_|\__|_|  \___/|_| |_|



font generated by:
http://patorjk.com/software/taag/#p=display&f=Doom&t=ChRIS%20Ultron

This module implements a server side feed controller/model.

"""

import abc
import json

import C_snode

class Feed(object):
    """The summary line for a class docstring should fit on one line.

    If the class has public attributes, they should be documented here
    in an ``Attributes`` section and follow the same formatting as a
    function's ``Args`` section.

    Attributes:
      __metaclass__ (ABCMeta): Used for abstract classing.
      attr2 (list of str): Description of `attr2`.
      attr3 (int): Description of `attr3`.

    """
    __metaclass__   = abc.ABCMeta

    def __init__(self):
        """Example of docstring on the __init__ method.

        The __init__ method may be documented in either the class level
        docstring, or as a docstring on the __init__ method itself.

        Either form is acceptable, but the two should not be mixed. Choose one
        convention to document the __init__ method and be consistent with it.

        Note:
          Do not include the `self` parameter in the ``Args`` section.

        Args:
          param1 (str): Description of `param1`.
          param2 (list of str): Description of `param2`. Multiple
            lines are supported.
          param3 (int, optional): Description of `param3`, defaults to 0.

        """

        self._stree             = C_snode.C_stree()
        self._name              = ""
        self._commentComponent  = {}
        self._dataviewComponet  = []
        self._noteComponent     = {}
        self._dateComponent     = []

    @abc.abstractmethod
    def create(self, **kwargs):
        """Create a new feed.

        A Feed "create" call. It requires an input source about which to
        create the feed. This input source is typically a reference to
        a location containing data.


        Args:
            **kwargs (user=): The user who is creating the feed

        Returns:
          True if successful, False otherwise.

        """

    def __str__(self):
        """Print
        """
        return str(self.stree.snode_root)

    @property
    def stree(self):
        """STree Getter"""
        return self._stree

    @stree.setter
    def stree(self, value):
        """STree Getter"""
        self._stree = value

    def example_method(self, param1, param2):
        """Class methods are similar to regular functions.

        Note:
          Do not include the `self` parameter in the ``Args`` section.

        Args:
          param1: The first parameter.
          param2: The second parameter.

        Returns:
          True if successful, False otherwise.

        """
        return True

class Feed_FS(Feed):
    """The Feed_FS subclass implements Feed operations against a File System

    Feed operations create/read actual data from an underlying filesystem

    """

    def __init__(self, astr_FeedRepo):
        """Constructor.

        This essentially calls up the chain to the base constructor

        Args:
            astr_FeedRepo (string): A location on the file system that houses
                all the feeds.

        """
        self._FeedRepoDir = astr_FeedRepo
        Feed.__init__(self)
        self.create()

    def create(self, **kwargs):
        """Create a new feed.

        A Feed "create" call. It requires an input source about which to
        create the feed. This input source is typically a reference to
        a location containing data.

        Creating a Feed entails building the directories and one-to-one
        objects:
            - title
            - note
            - data
            - comment


        Args:
          **kwargs (user=): The user creating the feed.
          **kwargs (str_ObjectID=): The string object reference used to access
            the Feed

        Returns:
          True if successful, False otherwise.

        """
        self._stree.mknode(['title', 'note', 'data', 'comment'])
        self._stree.cdnode('/data')
        self._stree.mknode(['visualView', 'fileView'])
        self._stree.cdnode('/comment')
        self._stree.touch("contents", "Hello, world!")


if __name__ == "__main__":
    feed    = Feed_FS('someRepo')
#    print(feed.stree)
    d = dict(feed.stree.snode_root)
#    print(d)
#    print(json.dumps(d))
