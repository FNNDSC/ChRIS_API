#!/usr/bin/env python

# -*- coding: utf-8 -*-
"""

 _____ _    ______ _____ _____   _   _ _ _
/  __ \ |   | ___ \_   _/  ___| | | | | | |
| /  \/ |__ | |_/ / | | \ `--.  | | | | | |_ _ __ ___  _ __
| |   | '_ \|    /  | |  `--. \ | | | | | __| '__/ _ \| '_ \
| \__/\ | | | |\ \ _| |_/\__/ / | |_| | | |_| | | (_) | | | |
 \____/_| |_\_| \_|\___/\____/   \___/|_|\__|_|  \___/|_| |_|



font generated by:
http://patorjk.com/software/taag/#p=display&f=Doom&t=ChRIS%20Ultron

ChRIS_SM

'ChRIS_SM' is the 'ChRIS Simulated Machine' or 'ChRIS Simple Machine'
or ... :-) -- basically it is a simplified infrastructure for
developing / testing the API between the front end view and various
back-end services.

Essentially, 'ChRIS_SM' simulates the API behaviour on a synthetic
instance of ChRIS consisting of a single user (with password) and
a few feeds containing different data, views, results, notes, etc.


"""

import abc
import json
import hashlib

import C_snode
import feed

class ChRIS_SMUserDB(object):
    """A "DB" of users and passwords.

    """

    def DB_build(self):
        s               = self._stree
        s.mknode(['users'])
        s.cdnode('/users')
        s.mknode(['chris'])
        s.cdnode('chris')
        s.touch("passwd", "chris1234")

    def user_login(self, astr_user, astr_passwd):
        """Log a user in.

        This method "logs" a user in, using the passwd.

        Args:
            astr_user (string): The user to login.
            astr_passwd (string): The user passwd.

        Returns:
            adict (dictionary): {'status': True/False, 'token': tokenID, 'message': str_msg}

        """
        s       = self._stree
        ret     = {}
        s.cdnode('/users')
        if not s.cdnode(astr_user):
            ret['status']  = False
            ret['token']   = "null"
            ret['message'] = 'User not found in database.'
        else:
            if s.cat('passwd') != astr_passwd:
                ret['status']  = False
                ret['token']   = "null"
                ret['message'] = 'Incorrect password.'
            else:
                ret['status']  = True
                ret['token']   = 'ABCDEFG'
                ret['message'] = 'Successful login.'
        return ret

    def __init__(self):
        self._stree     = C_snode.C_stree()
        self.DB_build()

class ChRIS_SMCore(object):
    """The ChRIS_SM core

    """

    __metaclass__   = abc.ABCMeta

    def __init__(self, **kwargs):
        self.s_tree     = C_snode.C_stree()
        self._userDB    = ChRIS_SMUserDB()

    def login(self, astr_user, astr_passwd):
        return(self._userDB.user_login(astr_user, astr_passwd))

class ChRIS_SM(object):
    """The ChRIS Simulated Machine


    """
    __metaclass__   = abc.ABCMeta

    def __init__(self):
        """The CHRIS_SM constructor.

        """

        self._feedTree          = C_snode.C_stree()
        self._SMCore            = ChRIS_SMCore()
        self._name              = ""

    @abc.abstractmethod
    def build(self, **kwargs):
        """Build a ChRIS_SM instance.


        Args:
            **kwargs (user=): The user who is creating the feed

        Returns:
          True if successful, False otherwise.

        """

    @property
    def feedTree(self):
        """STree Getter"""
        return self._feedTree

    @feedTree.setter
    def feedTree(self, value):
        """STree Getter"""
        self._feedTree = value

    def login(self, astr_username, astr_passwd):
        return(self._SMCore.login(astr_username, astr_passwd))

    def feed_nextID(self):
        """Find the next ID in the Feed database

        Returns:
            nextID (string): The next ID to use for a Feed.
        """

class ChRIS_SMFS(ChRIS_SM):
    """The ChRIS_SMFS subclass implements a ChRIS_SM using the filesystem as persistent state.


    """

    def __init__(self, astr_FeedRepo):
        """Constructor.

        This essentially calls up the chain to the base constructor

        Args:
            astr_FeedRepo (string): A location on the file system that houses
                all the feeds.

        """
        self._ChRIS_repoDir = astr_FeedRepo
        ChRIS_SM.__init__(self)
        self.build()

    def build(self, **kwargs):
        """Build a ChRIS_SM instance.

        """
        f = self._feedTree
        f.mknode(['Feed-1', 'Feed-2', 'Feed-3', 'Feed-4'])
        for i in range(1, 5):
            str_i = str(i)
            f.cdnode('/Feed-%s'     % str_i)
            f.touch("ID", "000%s"   % str_i)
            f.touch("Feed", feed.Feed_FS('someRepo-%03i' % i))

    def feed_get(self, astr_feedID):
        """Get a feed.

        :param astr_feedID: The ID of the Feed to get
        :return: False if not found, otherwise the Feed object
        """
        f = self._feedTree
        l_feed = f.lstr_lsnode('/')
        print l_feed
        for feedNode in f.lstr_lsnode('/'):
            f.cd('/%s' % feedNode)
            print feedNode
            str_ID = f.cat('ID')
            print str_ID
            if str_ID == astr_feedID:
                return f.cat('Feed')
        return False



if __name__ == "__main__":
    """Simulated session interacting with the ChRIS_SM

    """

    m        = hashlib

    chris    = ChRIS_SMFS('someRepo')

    d        = chris.login('chris', 'chris1234')
    print d
    str_hash = m.md5(d['token']).hexdigest()
    print str_hash

    print chris._feedTree.snode_root
    print dict(chris._feedTree.snode_root)

    if chris.feed_get('0001'): print chris.feed_get('0001')